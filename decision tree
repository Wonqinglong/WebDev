<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Decision Tree Predictor</title>
<script src="https://d3js.org/d3.v7.min.js"></script>
<style>
  svg {
    font: 12px Arial, sans-serif;
    user-select: none;
  }

  .node circle {
    fill: #fff;
    stroke: steelblue;
    stroke-width: 2px;
  }

  .node text {
    font-size: 14px;
  }

  .link {
    fill: none;
    stroke: #ccc;
    stroke-width: 2px;
  }
</style>
</head>
<body>
<script>
// Load CSV data
d3.csv("data.csv").then(function(data) {
  // Preprocess data (if needed)
  
  // Construct decision tree data structure
  var treeData = {
    name: "Root",
    children: [
      {
        name: "Feature 1",
        children: [
          { name: "Leaf 1", value: 10 },
          { name: "Leaf 2", value: 20 }
        ]
      },
      {
        name: "Feature 2",
        children: [
          { name: "Leaf 3", value: 30 },
          { name: "Leaf 4", value: 40 }
        ]
      }
    ]
  };

  // Set up margin, width, and height for SVG
  var margin = {top: 20, right: 120, bottom: 20, left: 120},
      width = 960 - margin.right - margin.left,
      height = 500 - margin.top - margin.bottom;

  var i = 0,
      duration = 750,
      root;

  // Create a tree layout with specified size
  var tree = d3.tree().size([height, width]);

  // Append an SVG element to the body
  var svg = d3.select("body").append("svg")
      .attr("width", width + margin.right + margin.left)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // Construct the tree structure
  root = d3.hierarchy(treeData, function(d) { return d.children; });
  root.x0 = height / 2;
  root.y0 = 0;

  // Update the tree
  // Update the tree
// Update the tree
update(root);

function update(source) {

  // Compute the new tree layout
  var treeData = tree(root);

  // Get nodes and links data
  var nodes = treeData.descendants(),
      links = treeData.descendants().slice(1);

  // Update the x-coordinate of each node
  nodes.forEach(function(d) { d.y = d.depth * 180; });

  // Select all nodes and bind data
  var node = svg.selectAll('g.node')
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position
  var nodeEnter = node.enter().append('g')
      .attr('class', 'node')
      .attr("transform", function(d) {
        return "translate(" + source.y0 + "," + source.x0 + ")";
      })
      .on('click', click);

  nodeEnter.append('circle')
      .attr('class', 'node')
      .attr('r', 8)
      .style("fill", function(d) {
          return d._children ? "lightsteelblue" : "#fff";
      });

  nodeEnter.append('text')
      .attr("dy", ".35em")
      .attr("x", function(d) {
          return d.children || d._children ? -13 : 13;
      })
      .attr("text-anchor", function(d) {
          return d.children || d._children ? "end" : "start";
      })
      .text(function(d) { return d.data.name; });

  // Transition nodes to their new position
  var nodeUpdate = nodeEnter.merge(node);

  nodeUpdate.transition()
      .duration(duration)
      .attr("transform", function(d) {
          return "translate(" + d.y + "," + d.x + ")";
      });

  // Transition exiting nodes to the parent's new position
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) {
          return "translate(" + source.y + "," + source.x + ")";
      })
      .remove();

  // Update the links
  var link = svg.selectAll('path.link')
      .data(links, function(d) { return d.id; });

  // Enter any new links at the parent's previous position
  var linkEnter = link.enter().insert('path', "g")
      .attr("class", "link")
      .attr('d', function(d){
        var o = {x: source.x0, y: source.y0}
        return diagonal(o, o)
      });

  // Transition links to their new position
  var linkUpdate = linkEnter.merge(link);

  linkUpdate.transition()
      .duration(duration)
      .attr('d', function(d){ return diagonal(d, d.parent) });

  // Transition exiting links to the parent's new position
  var linkExit = link.exit().transition()
      .duration(duration)
      .attr('d', function(d) {
        var o = {x: source.x, y: source.y}
        return diagonal(o, o)
      })
      .remove();

  // Stash the old positions for transition
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });

}

// Toggle children on click
function click(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
  update(d);
}

// Creates a curved (diagonal) path from parent to the child nodes
function diagonal(s, d) {
  return `M ${s.y} ${s.x}
          C ${(s.y + d.y) / 2} ${s.x},
            ${(s.y + d.y) / 2} ${d.x},
            ${d.y} ${d.x}`;
}
});
</script>
</body>
</html>
